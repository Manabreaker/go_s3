# Gaus Storage API

Все API-запросы выполняются через шлюз:  
**Базовый URL:** `http://localhost:7000`

## Аутентификация

Система использует cookie с JWT для аутентификации.  
После успешного входа или регистрации cookie устанавливается автоматически.

---

## 1. Регистрация

**POST** `/register`

**Тело запроса:**
```json
{
  "email": "user@example.com",
  "password": "password123"
}
```
**Ответ:**
- `201 Created` — успешная регистрация, возвращает данные пользователя
- `422 Unprocessable Entity` — email занят или данные некорректны
- `400 Bad Request` — неверный формат запроса

---

## 2. Вход

**POST** `/login`

**Тело запроса:**
```json
{
  "email": "user@example.com",
  "password": "password123"
}
```
**Ответ:**
- `200 OK` — вход выполнен, устанавливается cookie
- `401 Unauthorized` — неверный email или пароль

---

## 3. Выход

**POST** `/logout`

**Ответ:**
- `200 OK` — выход выполнен (cookie удалена)
- `401 Unauthorized` — пользователь не авторизован

---

## 4. Получить список файлов

**GET** `/files`  
**Требуется авторизация**

**Ответ:**
- `200 OK`
```json
[
  { "name": "file.txt", "date": 1719859200 }
]
```
- `204 No Content` — файлов нет

---

## 5. Загрузить файл

**POST** `/upload`  
**Требуется авторизация**

**Тело запроса:**
```json
{
  "filename": "example.txt",
  "file": "<Base64-encoded file contents>"
}
```
**Ответ:**
- `200 OK` — файл загружен
- `400 Bad Request` — отсутствует имя файла или файл
- `409 Conflict` — файл с таким именем уже есть

---

## 6. Скачать файл

**POST** `/download`  
**Требуется авторизация**

**Тело запроса:**
```json
{
  "filename": "example.txt"
}
```
**Ответ:**
- `200 OK`
```json
{
  "status": "<Base64-encoded file contents>"
}
```
- `404 Not Found` — файл не найден

---

## 7. Удалить файл

**DELETE** `/delete`  
**Требуется авторизация**

**Тело запроса:**
```json
{
  "filename": "example.txt"
}
```
**Ответ:**
- `200 OK` — файл удалён
- `400 Bad Request` — отсутствует имя файла
- `404 Not Found` — файл не найден

---

## 8. Поделиться файлом (публичная ссылка)

**POST** `/share`  
**Требуется авторизация**

**Тело запроса:**
```json
{
  "filename": "example.txt"
}
```
**Ответ:**
- `200 OK`
```json
{
  "status": "<uuid-публичной-ссылки>"
}
```
- `404 Not Found` — файл не найден

---

## 9. Получить страницу публичного файла

**GET** `/share/{uuid}`

**Ответ:**  
HTML-страница с предпросмотром или ошибкой.

---

## 10. Скачать содержимое публичного файла

**GET** `/file/{uuid}`

**Ответ:**
- `200 OK`
```json
{
  "base64": "<Base64-encoded file>",
  "filename": "example.txt"
}
```
- `404 Not Found` — файл не найден или не расшарен

---

## Прочие страницы

- **GET** `/login` — страница входа (HTML)
- **GET** `/register` — страница регистрации (HTML)
- **GET** `/` — главная (HTML, требует авторизации)

---

## Примечания

- Все запросы (кроме регистрации, входа и публичных ссылок) требуют авторизации (cookie).
- Все тела запросов и ответов — JSON.
- Для загрузки и скачивания файлов используется base64-кодирование файла в строку.

---

## Примеры ошибок

**400 Bad Request**
```json
{ "error": "filename is empty" }
```

**401 Unauthorized**
```json
{ "error": "not authenticated" }
```

**404 Not Found**
```json
{ "error": "file not found" }
```

---

## Примеры использования

**Загрузка файла:**
```bash
curl -X POST http://localhost:7000/upload \
  -H 'Content-Type: application/json' \
  -b 'Authorization=<your_cookie>' \
  -d '{"filename":"hello.txt","file":"SGVsbG8gV29ybGQh"}'
```

---

**Получить публичную ссылку:**
```bash
curl -X POST http://localhost:7000/share \
  -H 'Content-Type: application/json' \
  -b 'Authorization=<your_cookie>' \
  -d '{"filename":"hello.txt"}'
```
Ответ:
```json
{ "status": "beefdead-0000-0000-0000-0123456789ab" }
```
Публичная страница:  
`http://localhost:7000/share/qwertyui-0000-0000-0000-0123456789ab`

---

**Скачать файл по публичной ссылке:**
```bash
curl http://localhost:7000/file/beefdead-0000-0000-0000-0123456789ab
```

---

**Все коды ошибок, форматы запросов и ответов полностью соответствуют поведению шлюза APIGateway.**
